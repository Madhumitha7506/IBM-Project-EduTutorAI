# -*- coding: utf-8 -*-
"""Untitled37.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R4nGwUyuJ5KUFBQGPQxNqVTihHs2XxYJ
"""

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM

# ---------------- Model Setup ----------------
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)
if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# ---------------- AI Response ----------------
def generate_response(prompt, max_length=512):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)
    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}
    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )
    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    response = response.replace(prompt, "").strip()
    return response

# ---------------- Concept Explanation + Summary ----------------
def explain_concept_with_summary(concept):
    explanation_prompt = f"Explain the concept of {concept} in detail with examples:"
    summary_prompt = f"Provide a short 3‚Äì5 line summary of {concept}."
    explanation = generate_response(explanation_prompt, max_length=800)
    summary = generate_response(summary_prompt, max_length=150)

    summary_html = f"""
    <div style="
        background-color: #1e3a8a;
        color: #ffffff;
        padding: 12px;
        border-radius: 10px;
        font-weight: bold;
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    ">
        {summary}
    </div>
    """
    return explanation, summary_html

# ---------------- Quiz Database ----------------
QUIZ_DB = {
    "java": [
        {"q": "Which keyword is used to inherit a class in Java?",
         "options": ["super", "this", "extends", "import"], "ans": "extends"},
        {"q": "Which of these is not a Java feature?",
         "options": ["Object-oriented", "Use of pointers", "Portable", "Dynamic"], "ans": "Use of pointers"},
        {"q": "What is JVM in Java?",
         "options": ["Java Virtual Machine", "Java Verified Mode", "Java Variable Method", "Joint Virtual Model"], "ans": "Java Virtual Machine"},
    ],
    "physics": [
        {"q": "Which law relates force and acceleration?",
         "options": ["Newton's First Law", "Newton's Second Law", "Law of Inertia", "Law of Conservation"], "ans": "Newton's Second Law"},
        {"q": "Unit of electric current?",
         "options": ["Volt", "Ampere", "Ohm", "Coulomb"], "ans": "Ampere"},
        {"q": "Which is NOT a property of waves?",
         "options": ["Wavelength", "Frequency", "Amplitude", "Density"], "ans": "Density"},
    ]
}

# ---------------- Quiz Logic ----------------
def load_quiz(topic):
    topic = topic.lower().strip()
    if topic not in QUIZ_DB:
        return "‚ùå No quiz found for this topic!", gr.update(choices=[], value=None), \
               "","", "","", topic
    qdata = QUIZ_DB[topic]
    q1, q2, q3 = qdata[0], qdata[1], qdata[2]
    return (
        q1["q"], gr.update(choices=q1["options"], value=None),
        q2["q"], gr.update(choices=q2["options"], value=None),
        q3["q"], gr.update(choices=q3["options"], value=None),
        topic
    )

def grade_quiz(ans1, ans2, ans3, topic):
    if topic not in QUIZ_DB:
        return "‚ùå Invalid quiz topic!", ""
    correct_answers = [q["ans"] for q in QUIZ_DB[topic]]
    user_answers = [ans1, ans2, ans3]
    score = sum([ua == ca for ua, ca in zip(user_answers, correct_answers)])

    score_html = f"""
    <div style="
        background: linear-gradient(135deg, #ff9800, #f44336);
        color: white;
        padding: 20px;
        border-radius: 15px;
        box-shadow: 0 6px 12px rgba(0,0,0,0.3);
        font-family: 'Arial Black', sans-serif;
        text-align: center;
    ">
        <h2>üéØ Your Score: {score}/3</h2>
        <p>‚úÖ Correct Answers:</p>
        <ol style="text-align:left; display:inline-block; margin: 0 auto;">
            <li>{correct_answers[0]}</li>
            <li>{correct_answers[1]}</li>
            <li>{correct_answers[2]}</li>
        </ol>
    </div>
    """
    return score_html, score_html

# ---------------- Gradio App ----------------
with gr.Blocks(css="""
    .gr-button {background-color: #ff6600 !important; color: white !important; font-weight: bold; border-radius: 10px;}
    .gr-button:hover {background-color: #e65100 !important;}
""") as app:

    gr.Markdown("<h1 style='text-align:center;'>üìò Educational AI Assistant</h1>")

    quiz_topic_state = gr.State()

    with gr.Tabs():
        # Concept Tab
        with gr.TabItem("Concept Explanation"):
            concept_input = gr.Textbox(label="Enter Concept (e.g., Newton's Laws)")
            explain_btn = gr.Button("Explain Concept")
            explanation_output = gr.Textbox(label="Explanation", lines=10)
            summary_box = gr.HTML("<div>Short summary will appear here</div>")
            explain_btn.click(explain_concept_with_summary, inputs=concept_input,
                              outputs=[explanation_output, summary_box])

        # Quiz Tab
        with gr.TabItem("Quiz Generator"):
            topic_input = gr.Textbox(label="Enter Topic (Java/Physics)")
            load_btn = gr.Button("Load Quiz")

            q1_text = gr.Textbox(label="Q1", interactive=False)
            q1_choice = gr.Radio(choices=[], label="Select Answer")
            q2_text = gr.Textbox(label="Q2", interactive=False)
            q2_choice = gr.Radio(choices=[], label="Select Answer")
            q3_text = gr.Textbox(label="Q3", interactive=False)
            q3_choice = gr.Radio(choices=[], label="Select Answer")

            submit_btn = gr.Button("Submit Quiz")

            load_btn.click(load_quiz, inputs=topic_input,
                           outputs=[q1_text, q1_choice, q2_text, q2_choice, q3_text, q3_choice, quiz_topic_state])

        # Score Tab
        with gr.TabItem("Score"):
            score_display = gr.HTML("<div>Your score will appear here after submission</div>")

        submit_btn.click(
            grade_quiz,
            inputs=[q1_choice, q2_choice, q3_choice, quiz_topic_state],
            outputs=[score_display, score_display]
        )

app.launch(share=True)